Prompt:

*"Create a new file Appointment.jsx inside the pages folder for my React project. This page should allow clients to book an appointment with an advocate.

Requirements:
UI & Design:

The page should have a clean, professional, and modern design.
Use a minimalist and intuitive layout that enhances user experience.
Ensure responsiveness so it works well on both desktop and mobile devices.
Functionality:

Implement a calendar feature similar to Calendly where users can select available dates.
Include a time-slot selection feature to allow users to choose specific times for their appointments.
Ensure that only available time slots are shown based on the advocateâ€™s schedule.
Provide a confirmation message after a successful booking.
If possible, integrate form validation to ensure valid input.
Implementation Details:

Use React and state management for handling user inputs.
If needed, use a third-party library like react-calendar or react-datepicker to implement the scheduling feature.
Consider using Tailwind CSS or Styled Components to enhance the page's aesthetic appeal.
Bonus Features (Optional but Recommended):
Allow users to enter their name, email, and purpose of the meeting before booking.
Send a confirmation email upon successful appointment booking.
Store the booking details using a backend API or a database if available.*


========
import React, { useState } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

const Appointment = () => {
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedTime, setSelectedTime] = useState("");
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [purpose, setPurpose] = useState("");
  const [confirmation, setConfirmation] = useState("");

  // Available time slots (example)
  const availableTimeSlots = ["10:00 AM", "11:00 AM", "2:00 PM", "4:00 PM"];

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!selectedDate || !selectedTime || !name || !email) {
      alert("Please fill all required fields.");
      return;
    }

    // Simulating API request
    setTimeout(() => {
      setConfirmation(`Appointment booked for ${selectedDate.toDateString()} at ${selectedTime}`);
    }, 1000);
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 p-6">
      <div className="bg-white shadow-lg rounded-lg p-6 w-full max-w-md">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4">Book an Appointment</h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Name Input */}
          <input
            type="text"
            placeholder="Your Name"
            className="w-full p-2 border rounded"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />

          {/* Email Input */}
          <input
            type="email"
            placeholder="Your Email"
            className="w-full p-2 border rounded"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          {/* Purpose Input */}
          <textarea
            placeholder="Purpose of Meeting (Optional)"
            className="w-full p-2 border rounded"
            value={purpose}
            onChange={(e) => setPurpose(e.target.value)}
          />

          {/* Date Picker */}
          <DatePicker
            selected={selectedDate}
            onChange={(date) => setSelectedDate(date)}
            minDate={new Date()}
            className="w-full p-2 border rounded"
            placeholderText="Select a date"
            required
          />

          {/* Time Slots */}
          <select
            className="w-full p-2 border rounded"
            value={selectedTime}
            onChange={(e) => setSelectedTime(e.target.value)}
            required
          >
            <option value="" disabled>Select a time</option>
            {availableTimeSlots.map((time) => (
              <option key={time} value={time}>
                {time}
              </option>
            ))}
          </select>

          {/* Submit Button */}
          <button type="submit" className="w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700">
            Book Appointment
          </button>
        </form>

        {/* Confirmation Message */}
        {confirmation && <p className="mt-4 text-green-600">{confirmation}</p>}
      </div>
    </div>
  );
};

export default Appointment;
